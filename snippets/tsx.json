{
	"useState": {
		"prefix": "us",
		"body": "const [$2, set$2] = useState($1);"
	},
	"useState with type": {
		"prefix": "ust",
		"body": "const [$2, set$2] = useState<$3>($1);"
	},
	"useEffect": {
		"prefix": "ue",
		"body": [
			"useEffect(() => {",
			"void (async () => {",
			"$1",
			"})();",
			"},[]);"
		]
	},
	"jsx style": {
		"prefix": "jsx",
		"body": [
			"<style jsx>{`",
			"$1",
			"`}</style>"
		]
	},
	"next initialprops": {
		"prefix": "nextinit",
		"body": [
			"// enables server-side rendering, this enable seo",
			"Page.getInitialProps = async (context) => {",
			"return {",
			"};",
			"};",
			""
		]
	},
	"next serverside": {
		"prefix": "nextserver",
		"body": [
			"// pre-render this page on each request",
			"export const getServerSideProps: GetServerSideProps<IProps> = async (context) => {",
			"return {",
			"props: {}",
			"};",
			"};",
			""
		]
	},
	"next static": {
		"prefix": "nextstatic",
		"body": [
			"// pre-render this page at build time",
			"export const getStaticProps: GetStaticProps<IProps> = async (context) => {",
			"const ${1:id} = context.params.$1 as string;",
			"return {",
			"props: {},",
			"revalidate: 60 * 60 * 24 // 1 day",
			"};",
			"};",
			"",
			"export const getStaticPaths: GetStaticPaths<{ $1: string; }> = async () => {",
			"return {",
			"fallback: true,",
			"paths: [{",
			"params: {",
			"id: 'xxx'",
			"}",
			"}]",
			"};",
			"};",
			""
		]
	},
	"next page": {
		"prefix": "nextpage",
		"body": [
			"import { NextPage, PageConfig } from 'next';",
			"import Head from 'next/head';",
			"",
			"interface IProps {",
			"}",
			"",
			"/**",
			" * $1",
			" */",
			"const page: NextPage<IProps> = () => {",
			"return (",
			"<>",
			"<Head>",
			"<title>$1</title>",
			"</Head>",
			"",
			"</>",
			");",
			"};",
			"",
			"export const config: PageConfig = {",
			"amp: false",
			"};",
			"",
			"export default page;",
			""
		]
	},
	"Callback": {
		"prefix": "cb",
		"body": [
			"($1) => {",
			"$2",
			"}"
		]
	},
	"className": {
		"prefix": "cls",
		"body": "className='$1'"
	}
}